name: Node.js pnpm build, lint and test

on:
  workflow_call:
    inputs:
      build:
        description: whether it run "pnpm build"
        default: true
        required: false
        type: boolean
      lint:
        description: whether it run "pnpm lint"
        default: true
        required: false
        type: boolean
      test:
        description: whether it run "pnpm test"
        default: true
        required: false
        type: boolean
      os:
        description: OSes (JSON format)
        default: '[ "ubuntu-latest", "windows-latest" ]'
        required: false
        type: string
      node-versions:
        description: Enforce Node.js versions (JSON format)
        default: ""
        required: false
        type: string
      node-version-file:
        description: Enforce node-version-file of actions/setup-node
        default: ""
        required: false
        type: string

env:
  nodejs-default-versions: "[ 14, 16, 18, 19 ]"

jobs:
  prepare:
    name: Determine parameters
    runs-on: ubuntu-latest
    outputs:
      node-version-file: ${{ steps.determine-parameters.outputs.node-version-file }}
      node-versions: ${{ steps.determine-parameters.outputs.node-versions }}
    steps:
      - name: Checkout the source
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0

      - name: Determine parameters
        id: determine-parameters
        run: |
          (
            if [[ '${{ inputs.node-versions }}' != "" ]]; then
              echo 'node-versions=${{ inputs.node-versions }}'
            elif [[ '${{ inputs.node-version-file }}' != "" ]]; then
              echo 'node-version-file=${{ inputs.node-version-file }}'
            else
              if [[ -e .nvmrc ]]; then
                echo node-version-file=.nvmrc
              elif [[ -e .node-version ]]; then
                echo node-version-file=.node-version
              elif [[ -e package.json && $( jq -r .volta.node < package.json ) != "null" ]]; then
                echo node-version-file=package.json
              else
                echo 'node-versions=${{ env.nodejs-default-versions }}'
              fi
            fi
          ) | tee -a "$GITHUB_OUTPUT"

  build-test:
    name: Build, Lint and Test
    needs: prepare
    strategy:
      matrix:
        os: ${{ fromJson(inputs.os) }}
        node-version: ${{ needs.prepare.outputs.node-versions != '' && fromJson(needs.prepare.outputs.node-versions) || fromJson('["Use node-version-file"]')  }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout the source
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0

      - name: Setup pnpm
        uses: pnpm/action-setup@c3b53f6a16e57305370b4ae5a540c2077a1d50dd # tag=v2.2.4

      - name: Setup a specific version of Node.js
        if: needs.prepare.outputs.node-versions != ''
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # tag=v3.5.1
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - name: Setup Node.js with node-version-file
        if: needs.prepare.outputs.node-versions == ''
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # tag=v3.5.1
        with:
          node-version-file: ${{ needs.prepare.outputs.node-version-file }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        if: ${{ inputs.build }}
        run: pnpm build

      - name: Lint
        if: ${{ inputs.lint }}
        run: pnpm lint

      - name: Test
        if: ${{ inputs.test }}
        run: pnpm test
